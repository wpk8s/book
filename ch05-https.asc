[[ch05-https]]
== HTTPS

HTTPS is mandatory today for a website. It can work without, but to have a
website, an online service online, serving visitors from everywhere, HTTPS
is mandatory to offer them a guarantee that data traveled between their
device and your website is encrypted and no middleman will be able to capture
sensitive personal data they might share with you.

I'll give you a basic example, related to common WordPress usage. You might
host online a popular local news website that allows visitors to comment on
the published articles. Your comment form is asking for a name and an email,
besides the comment body. The website is served without a secure certificate.
In the region, there's public WiFi access in all main areas, and most of
the local people have been connecting to this networks without too much
worries. Your website and the public WiFi is trusted by the local communities
of people. But recently, nobody knew, because of poor security of the WiFi
public network, a hacker managed to infiltrate some service, capturing all
insecure data traffic, between clients and the target service. In this case,
your website. So, the hacker is easily collecting all names, emails, easy
associated and sells them to some evil intended organization. What's even
worse, he can even rewrite parts of the responses, to change the truth of
some articles.

OK, it might sound a bit harsh the previous paragraph, but it is a totally
possible scenario, and even more critical can happen. We use WordPress to
create websites for medical centers, for kindergartens, news services, etc.
It is mandatory to make our website or service to use http://j.mp/3b8zE9D[HTTPS].

To make an example for this, I will prepare the following scenarios using
subdomains of real domains I own, as this is the most common scenario I am
sure the readers of this book intend to use, and to be able to fully
understand this, you should practice it with at least one real domain. If
you don't have any, you could buy a domain to use for personal portfolio,
blog, email etc.

Before we dive in setting up secure servers, one thing to note is, this layer
of the service involves additional cpu usage, not too much if the traffic is
low on a website, but on a heavy traffic WooCommerce website, on a Black Friday
event, would be easier to measure how much it's affecting. So, we will cover
solutions starting from simple to advanced.

Next, let's reuse all from previous chapter the setup of a virtual cloud server and
for MicroK8s, in case you have deleted the server. We need to continue working from
the step of creating a "recipe" for our website. If you stopped and deleted
everything, go back to it, and do it again, and stop before destroying the
cloud server. If you already have something running in the cluster, it's fine
everything should be isolated also. If you get into problems, that will be
fine too, as it will force you to learn more by fixing them.

=== cert-manager

With almost any way of setting up https and using digital x509 certificates, we
need a way to handle them. Meet https://cert-manager.io[**cert-manager**].

What it does, exactly as it's name suggests, it is a tool to manage certificates
in a kubernetes cluster. Short, for this book, I will focus on how it can handle
Let's encrypt and Cloudflare edge.

To install cert-manager, all we need to do it to run one command. First, please
open https://github.com/jetstack/cert-manager/tags[cert-manager tags] on
Github, and check for the most high release tag version possible. As I write the
book, it's 1.2.0. Now, run, replacing the version if necessary:
`microk8s.kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.2.0/cert-manager.yaml`

In about a minute or two, it should finish applying minimal configuration and
start required services it needs. We have not yet spent time on RBAC, but if have
enabled it in the cluster, do be aware it needs extra setup that we will cover
later in the book, not needed at current level yet.

Next, we will cover three cases: ACME / Let's encrypt, CA issuer, possible useful
for remote testing clusters, and external Cloudflare Origin CA.

=== Let's encrypt

Let's encrypt needs to verify and validate the ownership of the domain or
subdomain that the certificate is intended to be used. Without this, a certificate
can't be issued. The easy way, is HTTP01 and the possible complicated one
is DNS01, but needed for wildcard certificates.

Let's start with the HTTP01, simplest to setup and possible most used.

We need to setup a cert-manager Issuer that will handle automatically
creation and renewals of certificates. Let's encrypt has a staging and a
production mode, and I do recommend setting up both, as if you need to
test before production, staging is very relaxed over api calls. Forcing
directly production while something was not done right, might cause reaching
failed validation limit of 5 per hour on a host. Trying first staging will
make you sure production should not fail. Read more if necessary
https://letsencrypt.org/docs/rate-limits/[here].

Next, let's create the Staging Issuer. Make a folder named `cert-manager`.
Create `acme-staging-issuer.yml` file and paste the following, making sure
you replace the **email** key value with a real one you have access to.
It's important as any issues related to the certificate will be sent
to this email address.

[source,yaml,linenums]
----
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-staging
spec:
  acme:
    email: user@example.com
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      name: letsencrypt-staging
    solvers:
    - http01:
       ingress:
         class: public
----

And the production Issuer, replacing the **email** key value, in
`acme-production-issuer.yml`

[source,yaml,linenums]
----
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    email: user@example.com
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - http01:
       ingress:
         class: public
----

Let's apply the configuration (change directory to where you created
the folder with the files).

[source,shell]
----
cd ~/cert-manager
microk8s.kubectl apply -f ./acme-staging-issuer.yml
microk8s.kubectl apply -f ./acme-production-issuer.yml
----

Each apply command should output:

`issuer.cert-manager.io "letsencrypt-staging" created`
`issuer.cert-manager.io "letsencrypt-prod" created`

You can check their validity running:
`microk8s.kubectl describe issuer letsencrypt-staging`
`microk8s.kubectl describe issuer letsencrypt-prod`

Next, assuming you have a WordPress deployed website as covered in
previous chapter, let's setup a real domain for it. Open the
`wordpress-statefulset.yml` file and look for the **Ingress** section.
We need to add and replace some lines trying to match the next example,
to which you must replace the domain with your real domain.

[source,yaml,linenums]
----
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: wordpress
  labels:
    app: wordpress
  annotations:
    cert-manager.io/issuer: "letsencrypt-staging"
spec:
  tls:
  - hosts:
    - demo.wpk8s.club
    secretName: wpk8s-club-demo-tls
  rules:
  - host: demo.wpk8s.club
    http:
      paths:
        - pathType: Prefix
          path: "/"
          backend:
            service:
              name: wordpress
              port:
                number: 80
----

Let's apply:

[source,shell]
----
cd ~/wordpress
microk8s.kubectl apply -k ./
----

We can monitor generation of the certificate by running:
`microk8s.kubectl get certificate`. This will list all current certificates.
The status is in the `Ready` column and once ok, should be `True`.

To inspect the certificate run:
`microk8s.kubectl describe certificate wpk8s-club-tls`, replacing with
the name you gave for the certificate.

If it worked, let's make it for production.

Edit the `wordpress-statefulset.yml` and change `letsencrypt-staging` to
`letsencrypt-prod`.

[source,yaml,linenums]
----
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: wordpress
  labels:
    app: wordpress
  annotations:
    cert-manager.io/issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - wpk8s.club
    secretName: wpk8s-club-tls
  rules:
  - host: wpk8s.club
    http:
      paths:
        - pathType: Prefix
          path: "/"
          backend:
            service:
              name: wordpress
              port:
                number: 80
----

Let's apply:

[source,shell]
----
microk8s.kubectl apply -k ./
----

Check it's status: `microk8s.kubectl get certificate` and once done,
Try to load the website in your browser.

NOTE: You may have notice, that I use often the `microk8s.kubectl apply -k ./`
command. I organize all related things of a project in one folder that
contains a `kustomization.yml` file. This file will reference all extra
files needed with any naming you want to use. I separate in files all
configuration related to a service and in `kustomization.yml` keep all
common things. In a future chapter we will dive in how to organize well
a project.

Wait! We missed something. Try to load the website by adding www in front.
Won't work. Why? Simple: we must be explicit about host aliases.

Let's add the extras to `wordpress--statefulset.yml` and apply again.

[source,yaml,linenums]
----
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: wordpress
  labels:
    app: wordpress
  annotations:
    cert-manager.io/issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/server-alias: "www.wpk8s.club"
spec:
  tls:
  - hosts:
    - wpk8s.club
    - www.wpk8s.club
    secretName: wpk8s-club-tls
  rules:
  - host: wpk8s.club
    http:
      paths:
        - pathType: Prefix
          path: "/"
          backend:
            service:
              name: wordpress
              port:
                number: 80
----

I added `nginx.ingress.kubernetes.io/server-alias: "www.demo.wpk8s.club"`
annotation so nginx will know that the `www.wpk8s.club` is an alias vhost
for my WordPress website and I added the entry also to the tls spec, letting
cert-manager know it needs to add it to the SAN entry of the certificate.

Understanding certificates needs a long good chapter, and today's
standards are slightly different than what were many years ago and some
classic usage of paid certificates might not be compliant with what
modern browsers like Microsoft Edge, Google Chrome and Firefox are preferring.

What we have managed above, is the basics of modern free certificates with
Let's encrypt, and we will come back to the topic when you want to cover
extra SAN (Subject Alternate Name), when we will see how to manage a common
certificate for multiple WordPress websites, under same domain.

NOTE: Wildcard Let's Encrypt certificates must be done different, and requires
a more complex setup. I will detail this in a dedicated chapter later, to keep
to simple things first.

=== Cloudflare

This setup involves Cloudflare to provide
public facing certificate for visitors and private certificate for communication
between Cloudflare network and our infrastructure. Other alternatives to Cloudflare
should provide identical result.

IMPORTANT: If you are going to use services like Cloudflare, I strongly recommend
you do read for any component used from it to research careful it's pricing
model. Cloudflare starts from free, and can cover all essential needs of a
WordPress website, including DNS, DDOS protection, Cache, Firewall on the free
level offered, but each of them, and all the extra comes with small prices which
increases depending on different aspects.

image:images/cloudflare-full-strict.png[Ideal encryption using Cloudflare]

What we see in the screenshot above is the browser communicates securely with
Cloudflare, which communicates securely with our server. You should research
for a deep dive in the topic using
http://j.mp/37jBl2P[their official support pages] at the moment
you want to understand the technical aspects of how it works. I will guide
you step by step how to implement this.

First, if you do not have a Cloudflare account, proceed and create one. The
registration does not involve any spending and it's a few minutes process.
If you do not intend yet to do it, it's fine, read along or feel free to jump
to the alternative fully managing on your own digital certificates, I will
provide minimal security tips along the book enough to help.

Cloudflare requires that the domain name will use them as DNS, so you will have to go
through their process of switching the DNS nameservers for your domain to them. The
process is easy, and will copy all current DNS records to make sure it will not break
any already setup email records, anti spam records and others you might already have.
Make sure to review all discovered records, and once you do transfer the nameservers,
there might be a few minutes to a few hours of waiting period to be fulfilled.
Cloudflare will offer you a status change if you recheck the page anytime you want.
