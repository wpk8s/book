[[ch06-services-versions]]
== Services versions

I'm really glad you've made it until now. We still have a few steps to
achieve a production grade concept to deploy WordPress.

In this chapter we are going to detail about versions of services used,
that is for WordPress container and MariaDB.

MicroK8s is a Kubernetes distribution intended to self upgrade, and as
long as external addons are used at minimum, maintenance over it is
minimal.

It's normal we must take care of the operating system updates, and I will
give you some tricks for automating upgrades and schedule safe restarts if
needed.

Our discussed extra addon until now, **cert-manager**, it's upgrade can be
done, by applying the main remote configuration on each new tag, and to be
aware of that, we can use different ways, like subscribing in Github to
be notified by each new release of the project.

But let's start with our **WordPress** services management.

=== Locking container versions

I'll bring back again the full recipe of a WordPress website
and we will *talk* on every important part of it.

.https://j.mp/3q0UdLp[kustomization.yml]
[source,yaml,linenums]
----
---
secretGenerator:
# Saving the password in clear text
# must not be done for public, production facing
# websites.
- name: mysql-pass
  literals:
  - password=password123
resources:
  - mysql-statefulset.yaml
  - wordpress-statefulset.yaml
----

This is our start, our Kustomization file.

We don't have any mention about a service version in it, but there is one critical
thing. We stored a clear text password in it. We must not do this ever for
production, public facing websites. It was simply easy to exemplify for a
private experiment short lived that should be removed!

What would be best practices to handle secrets for our websites? There are lots
of options and opinions on how to do this. I take an easy approach.

I use a passwords application to save them. I use https://keepass.info[KeePass]
and any similar solution, cloud based also should be fine.

Once I'm creating a new strong password, save it organized well, in case of
KeePass, I use a dedicated database file for projects, I'm creating using
`kubectl` the secret with the password.

Let's create a configuration template and a bash script to automate creation
and update of a secret. You will be able to reuse this anytime you
want to create a new secret or update an existing one. Make a new directory
to store this files.

.safe-password-manager.yml.tmpl
[source,yaml,linenums]
----
---
apiVersion: v1
kind: Secret
metadata:
  name: SECRET_NAME
type: Opaque
data:
  # You can include additional key value pairs as you do with Opaque Secrets
  password: SECRET_PASSWORD
----

.safe-password-manager.sh
[source,bash,linenums]
----
#!/usr/bin/env bash
echo -n "Please enter a secret password name: "
read SECRET_NAME

echo -n "Please enter the password: "
read -p SECRET_PASSWORD

echo -e "\n"

sed "s/SECRET_NAME/$SECRET_NAME/g" \
  safe-password-manager.yml.tmpl | \
  sed "s/SECRET_PASSWORD/`echo $SECRET_PASSWORD|base64`/g" - | \
  microk8s.kubectl apply -f -
----

To create a new password now, just run:
`bash safe-password-manager.sh`
enter the secret name and after the password.

The output should look like:

[source,text]
----
madalin@devserver:~/secret-password-manager$ bash safe-password-manager.sh
Please enter a secret password name: new-secret-password
Please enter the password:

secret/new-secret-password created
----

Next, let's go through the MariaDB service.

.https://j.mp/3cRFHSq[mysql-statefulset.yml]
[source,yaml,linenums]
----
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress-mysql
  labels:
    app: wordpress
spec:
  ports:
    - port: 3306
  selector:
    app: wordpress
    tier: mysql
  clusterIP: None
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: wordpress-mysql
  labels:
    app: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
      tier: mysql
  serviceName: wordpress-mysql
  template:
    metadata:
      labels:
        app: wordpress
        tier: mysql
    spec:
      containers:
      - image: mariadb:10.5
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: wordpress-mysql
          mountPath: /var/lib/mysql
  volumeClaimTemplates:
  - metadata:
      name: wordpress-mysql
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi
----

We have created MariaDB as a stateful service.

.https://j.mp/2MJJMNZ[wordpress-statefulset.yml]
[source,yaml,linenums]
----
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: wordpress
  labels:
    app: wordpress
spec:
  rules:
  - host: wordpress.k8s
    http:
      paths:
        - pathType: Prefix
          path: "/"
          backend:
            service:
              name: wordpress
              port:
                number: 80
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  labels:
    app: wordpress
spec:
  ports:
  - port: 80
    protocol: TCP
  selector:
    app: wordpress
    tier: frontend
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: wordpress
  labels:
    app: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
      tier: frontend
  serviceName: wordpress
  template:
    metadata:
      labels:
        app: wordpress
        tier: frontend
    spec:
      initContainers:
      - name: init-mysql
        image: busybox
        command: ['sh', '-c', 'until nslookup wordpress-mysql; do echo waiting for mysql; sleep 2; done;']
      containers:
      - image: wordpress:5.6
        name: wordpress
        env:
        - name: WORDPRESS_DB_HOST
          value: wordpress-mysql
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 80
          name: wordpress
        volumeMounts:
        - name: wordpress
          mountPath: /var/www/html
  volumeClaimTemplates:
  - metadata:
      name: wordpress
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi
----

=== Upgrading services
